{"version":3,"sources":["glass.wav","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["audio1","Audio","audio_path","audio2","url","s","process","KittyWalk","useState","time","set_time","left","set_left","secs","step","Math","round","x","angle","cw","useEffect","last","Date","getTime","intvl","setInterval","t","clearInterval","src","className","height","style","Timer","set_last","paused","set_paused","on_break","set_on_break","break_threshold","set_break_threshold","new_time","Notification","onclick","window","focus","play","setTimeout","diff","sec","floor","min","to_str","n","toString","padStart","onClick","width","type","defaultValue","onChange","e","parseInt","target","value","isNaN","console","log","App","requestPermission","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b53f290a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/glass.5e5abdab.wav\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport audio_path from './glass.wav';\n\nlet audio1 = new Audio(audio_path);\nlet audio2 = new Audio(audio_path);\n\nconst PLAY_AUDIO = true;\nconst frame_rate = 30;\n\nlet url = s => process.env.PUBLIC_URL + s;\n\nlet KittyWalk = () => {\n  let [time, set_time] = useState(0);\n  let [left, set_left] = useState(true);\n\n  let px_per_sec = 40;\n  let anim_speed = 0.6;\n\n  let secs = time / 1000;\n  let step = Math.round(secs / anim_speed);\n  let x = step * px_per_sec;\n  let angle = step % 2 == 0 ? -15 : 5;\n\n  let cw = 600;\n  let iw = 160;\n  if (x >= cw - iw / 2) {\n    set_left(!left);\n    set_time(0);\n  }\n\n  useEffect(() => {\n    let last = new Date().getTime();\n    let intvl = setInterval(() => {\n      let t = new Date().getTime();\n      set_time(time + t - last);\n      last = t;\n    }, 1000 / frame_rate);\n\n    return () => clearInterval(intvl);\n  }, [time, left]);\n\n  let src = url(left ? \"/mimi.png\" : \"/naibang.png\");\n\n  return <div className='kitty-walk'>\n    <img className='kitty' src={src} height=\"100\" style={{\n      [left ? \"left\" : \"right\"]: x,\n      transform: `rotate(${angle}deg) scaleX(-1)`\n    }}/>\n  </div>;\n}\n\nlet Timer = () => {\n  let [last, set_last] = useState(new Date().getTime());\n  let [time, set_time] = useState(0);\n  let [paused, set_paused] = useState(true);\n  let [on_break, set_on_break] = useState(false);\n  let [break_threshold, set_break_threshold] = useState(25);\n\n  useEffect(() => {\n    let intvl = setInterval(() => {\n      let t = new Date().getTime();\n      if (!paused) {\n        let new_time = time + t - last;\n        set_time(new_time);\n\n        if (new_time / 1000 > break_threshold*60 && !on_break) {\n          set_on_break(true);\n          set_paused(true);\n\n          if (PLAY_AUDIO) {\n            let notification = new Notification('Break time!');\n            notification.onclick = () => {\n              window.focus();\n            };\n            audio1.play();\n            setTimeout(() => {audio2.play()}, 200);\n          }\n        }\n      }\n      set_last(t);\n    }, 1000 / frame_rate);\n\n    return () => clearInterval(intvl);\n  }, [paused, on_break]);\n\n  let diff = break_threshold * 60 - time / 1000;\n  let sec = Math.floor(diff % 60);\n  let min = Math.floor(diff / 60 % 60);\n\n  let to_str = n => n.toString().padStart(2, \"0\");\n\n  return <div>\n    {!on_break\n      ? <>\n        <div className='current-time'>\n          {paused && time == 0\n            ? <input type=\"text\"\n                     defaultValue={to_str(break_threshold)}\n                     onChange={(e) => {\n                       let n = parseInt(e.target.value);\n                       if (!isNaN(n)) {\n                         console.log(n);\n                         set_break_threshold(n);\n                       }\n                     }} />\n            : to_str(min)}\n\n          {`:${to_str(sec)}`}\n        </div>\n        <div className='buttons'>\n          <button onClick={() => set_paused(!paused)}>{paused ? \"Start\" : \"Pause\"}</button>\n          <button onClick={() => {\n            let new_start = new Date().getTime();\n            set_time(0);\n            set_paused(true);\n          }}>Reset</button>\n        </div>\n        {!paused ? <KittyWalk /> : null}\n      </>\n      : <>\n        <div className='break-time'>Break time!</div>\n        <div className='back-to-work'><button onClick={() => {\n          set_time(0);\n          set_last(new Date().getTime());\n          set_paused(true);\n          set_on_break(false);\n        }}>Back to work...</button></div>\n        <img src={url(\"/bothkitties.png\")} width=\"100%\" />\n      </>}\n  </div>;\n};\n\n\nfunction App() {\n  useEffect(() => {\n    Notification.requestPermission();\n  });\n\n  return (\n    <div className=\"container\">\n      <h1>Tetedoro</h1>\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}